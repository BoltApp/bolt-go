// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PaymentResponsePendingTag string

const (
	PaymentResponsePendingTagPending PaymentResponsePendingTag = "pending"
)

func (e PaymentResponsePendingTag) ToPointer() *PaymentResponsePendingTag {
	return &e
}
func (e *PaymentResponsePendingTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		*e = PaymentResponsePendingTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePendingTag: %v", v)
	}
}

type PaymentResponsePendingStatus string

const (
	PaymentResponsePendingStatusAwaitingUserConfirmation PaymentResponsePendingStatus = "awaiting_user_confirmation"
)

func (e PaymentResponsePendingStatus) ToPointer() *PaymentResponsePendingStatus {
	return &e
}
func (e *PaymentResponsePendingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		*e = PaymentResponsePendingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponsePendingStatus: %v", v)
	}
}

type Action string

const (
	ActionRedirect Action = "redirect"
)

func (e Action) ToPointer() *Action {
	return &e
}
func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type PaymentResponsePending struct {
	DotTag PaymentResponsePendingTag    `json:".tag"`
	ID     *string                      `json:"id,omitempty"`
	Status PaymentResponsePendingStatus `json:"status"`
	Action Action                       `json:"action"`
	URL    string                       `json:"url"`
}

func (o *PaymentResponsePending) GetDotTag() PaymentResponsePendingTag {
	if o == nil {
		return PaymentResponsePendingTag("")
	}
	return o.DotTag
}

func (o *PaymentResponsePending) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentResponsePending) GetStatus() PaymentResponsePendingStatus {
	if o == nil {
		return PaymentResponsePendingStatus("")
	}
	return o.Status
}

func (o *PaymentResponsePending) GetAction() Action {
	if o == nil {
		return Action("")
	}
	return o.Action
}

func (o *PaymentResponsePending) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
