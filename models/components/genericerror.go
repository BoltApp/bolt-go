// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// GenericErrorTag - The type of error returned
type GenericErrorTag string

const (
	GenericErrorTagUnauthorized         GenericErrorTag = "unauthorized"
	GenericErrorTagForbidden            GenericErrorTag = "forbidden"
	GenericErrorTagUnprocessableRequest GenericErrorTag = "unprocessable_request"
	GenericErrorTagNotFound             GenericErrorTag = "not_found"
)

func (e GenericErrorTag) ToPointer() *GenericErrorTag {
	return &e
}
func (e *GenericErrorTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unauthorized":
		fallthrough
	case "forbidden":
		fallthrough
	case "unprocessable_request":
		fallthrough
	case "not_found":
		*e = GenericErrorTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GenericErrorTag: %v", v)
	}
}

type GenericError struct {
	// The type of error returned
	DotTag GenericErrorTag `json:".tag"`
	// A human-readable error message, which might include information specific to the request that was made.
	Message string `json:"message"`
}

func (o *GenericError) GetDotTag() GenericErrorTag {
	if o == nil {
		return GenericErrorTag("")
	}
	return o.DotTag
}

func (o *GenericError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}
