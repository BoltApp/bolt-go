// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/BoltApp/bolt-go/internal/utils"
)

type PaymentResponseType string

const (
	PaymentResponseTypeFinalized PaymentResponseType = "finalized"
	PaymentResponseTypePending   PaymentResponseType = "pending"
)

type PaymentResponse struct {
	PaymentResponseFinalized *PaymentResponseFinalized
	PaymentResponsePending   *PaymentResponsePending

	Type PaymentResponseType
}

func CreatePaymentResponseFinalized(finalized PaymentResponseFinalized) PaymentResponse {
	typ := PaymentResponseTypeFinalized

	typStr := PaymentResponseFinalizedTag(typ)
	finalized.DotTag = typStr

	return PaymentResponse{
		PaymentResponseFinalized: &finalized,
		Type:                     typ,
	}
}

func CreatePaymentResponsePending(pending PaymentResponsePending) PaymentResponse {
	typ := PaymentResponseTypePending

	typStr := PaymentResponsePendingTag(typ)
	pending.DotTag = typStr

	return PaymentResponse{
		PaymentResponsePending: &pending,
		Type:                   typ,
	}
}

func (u *PaymentResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		DotTag string `json:".tag"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.DotTag {
	case "finalized":
		paymentResponseFinalized := new(PaymentResponseFinalized)
		if err := utils.UnmarshalJSON(data, &paymentResponseFinalized, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (DotTag == finalized) type PaymentResponseFinalized within PaymentResponse: %w", string(data), err)
		}

		u.PaymentResponseFinalized = paymentResponseFinalized
		u.Type = PaymentResponseTypeFinalized
		return nil
	case "pending":
		paymentResponsePending := new(PaymentResponsePending)
		if err := utils.UnmarshalJSON(data, &paymentResponsePending, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (DotTag == pending) type PaymentResponsePending within PaymentResponse: %w", string(data), err)
		}

		u.PaymentResponsePending = paymentResponsePending
		u.Type = PaymentResponseTypePending
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PaymentResponse", string(data))
}

func (u PaymentResponse) MarshalJSON() ([]byte, error) {
	if u.PaymentResponseFinalized != nil {
		return utils.MarshalJSON(u.PaymentResponseFinalized, "", true)
	}

	if u.PaymentResponsePending != nil {
		return utils.MarshalJSON(u.PaymentResponsePending, "", true)
	}

	return nil, errors.New("could not marshal union type PaymentResponse: all fields are null")
}
