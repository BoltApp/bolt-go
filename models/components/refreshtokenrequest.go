// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RefreshTokenRequestGrantType - The type of OAuth 2.0 grant being utilized.
type RefreshTokenRequestGrantType string

const (
	RefreshTokenRequestGrantTypeRefreshToken RefreshTokenRequestGrantType = "refresh_token"
)

func (e RefreshTokenRequestGrantType) ToPointer() *RefreshTokenRequestGrantType {
	return &e
}

func (e *RefreshTokenRequestGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refresh_token":
		*e = RefreshTokenRequestGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefreshTokenRequestGrantType: %v", v)
	}
}

type RefreshTokenRequestScope string

const (
	RefreshTokenRequestScopeBoltAccountManage RefreshTokenRequestScope = "bolt.account.manage"
	RefreshTokenRequestScopeBoltAccountView   RefreshTokenRequestScope = "bolt.account.view"
	RefreshTokenRequestScopeOpenid            RefreshTokenRequestScope = "openid"
)

func (e RefreshTokenRequestScope) ToPointer() *RefreshTokenRequestScope {
	return &e
}

func (e *RefreshTokenRequestScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bolt.account.manage":
		fallthrough
	case "bolt.account.view":
		fallthrough
	case "openid":
		*e = RefreshTokenRequestScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefreshTokenRequestScope: %v", v)
	}
}

type RefreshTokenRequest struct {
	// The type of OAuth 2.0 grant being utilized.
	GrantType RefreshTokenRequestGrantType `form:"name=grant_type"`
	// The value of the refresh token issued to you in the originating OAuth token request.
	RefreshToken string `form:"name=refresh_token"`
	// The OAuth client ID, which corresponds to the merchant publishable key, which can be retrieved
	// in the Merchant Dashboard.
	//
	ClientID string `form:"name=client_id"`
	// The OAuth client secret, which corresponds the merchant API key, which can be retrieved in the
	// Merchant Dashboard.
	//
	ClientSecret string `form:"name=client_secret"`
	// The requested scopes. If the request is successful, the OAuth client will be able to perform operations requiring these scopes.
	//
	Scope []RefreshTokenRequestScope `form:"name=scope"`
	// A randomly generated string sent along with an authorization code. This must be included, if provided,
	// in order to prevent CSRF attacks. used to prevent CSRF attacks.
	//
	State *string `form:"name=state"`
}

func (o *RefreshTokenRequest) GetGrantType() RefreshTokenRequestGrantType {
	if o == nil {
		return RefreshTokenRequestGrantType("")
	}
	return o.GrantType
}

func (o *RefreshTokenRequest) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *RefreshTokenRequest) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *RefreshTokenRequest) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *RefreshTokenRequest) GetScope() []RefreshTokenRequestScope {
	if o == nil {
		return []RefreshTokenRequestScope{}
	}
	return o.Scope
}

func (o *RefreshTokenRequest) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}
